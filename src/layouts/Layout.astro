---
import BaseHead from '../components/BaseHead.astro';
import Footer from '../components/Footer.astro';
import Header from '../components/Header.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="es">
  <head>
    <BaseHead title={title} description={SITE_DESCRIPTION} />
  </head>
  <body class="flex flex-col">
    <Header />
    <main id="content" class="px-4 max-w-3xl mx-auto w-full">
      <slot />
    </main>
    <div
      class="fixed -z-10 h-[134px] w-[134px] lg:w-[300px] lg:h-[300px] rounded-full bg-red-600 blur-[150px] lg:blur-[350px] opacity-50 left-0 top-0"
    >
    </div>
    <div
      class="fixed -z-10 h-[134px] w-[134px] lg:w-[300px] lg:h-[300px] rounded-full bg-amber-600 blur-[150px] lg:blur-[350px] opacity-50 right-0 bottom-0"
    >
    </div>
    <Footer />
  </body>
</html>

<script>
  const isNavigationSupported = () => {
    return Boolean(document.startViewTransition);
  };

  export const startViewTransition = () => {
    if (!isNavigationSupported) return;

    // escuchar evento de navegación
    window.navigation.addEventListener('navigate', (event) => {
      // url de destino
      const toUrl = new URL(event.destination.url);

      // si el dominio base actual es diferente al destino, no hacer nada,
      // esto es para evitar que se ejecute en páginas externas
      if (location.origin !== toUrl.origin) return;

      // si es una navegacion en el mismo dominio, interceptamos el evento
      event.intercept({
        // y ejecutamos el código que queramos
        async handler() {
          // vamos a cargar la página de destino
          // utilizando un fetch para obtener su HTML
          const response = await fetch(toUrl.pathname); // /notes/angular
          const text = await response.text();

          // nos quedamos con el contenido html dentro de la etiqueta body
          // usamos un regex para extraerlo
          const [, data] = text.match(/<body[^\>]*>([\s\S]*)<\/body>/i);

          // utilizar la API de View Transition
          // como tiene que hacer la navegacion
          document.startViewTransition(() => {
            // como tiene que actualizar la vista
            document.body.innerHTML = data;
            // el scroll hasta arriba de la página
            document.documentElement.scrollTop = 0;
          });
        },
      });
    });
  };
</script>